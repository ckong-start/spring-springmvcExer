<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<!-- 加载jdbc.prperties属性配置文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- 配置包扫描 -->
	<context:component-scan base-package="com">
		<!-- context:exclude-filter表示自定义排除
			type表示设置排除的类型
				annotation表示按注解来进行过滤
				另一种assignable表示指定全类名的方式过滤
		 -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	<!-- 数据库连接池 -->
	<bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource">
		<property name="username" value="${user}"/>
		<property name="password" value="${password}"/>
		<property name="driverClassName" value="${driverClassName}"/>
		<property name="url" value="${url}"/>
		<property name="initialSize" value="${initialSize}"/>
		<property name="maxActive" value="${maxActive}"/>
	</bean>
	<!-- spring整合mybatis
		创建SqlSessionFactory
	 -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
		<!-- 配置mybatis核心配置文件目录 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<!-- mybatis使用spring数据库连接池 -->
		<property name="dataSource" ref="dataSource"/>
		<!-- 配置加载Mapper.xml配置文件的路径，如果mybatis-config.xml中配置了此处可以省略
		<property name="mapperLocations" value="classpath:com/mapper/*.xml"/> -->
	</bean>
	<!-- 配置Mybatis的Mapper接口扫描，把Mapper接口都加载到SpringIOC容器中 -->
	<mybatis-spring:scan base-package="com.mapper"/>
	
	<!-- Mybatis和spring整合好，是可以从Spring容器中获取Mapper接口，还可以使用Mapper接口操作数据库 -->
	
	<!-- AOP代理 + 切面（事务管理器）+ 事务属性 -->
	<!-- 切面 -->
	<bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 配置事务属性 -->
	<tx:advice id="tx_advice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<!-- 剩下的是只读，spring底层会做优化 -->
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置AOP代理 -->
	<aop:config>
		<aop:advisor advice-ref="tx_advice"
			pointcut="execution(public * com..*Service*.*(..))"
		/>
	</aop:config>
</beans>
