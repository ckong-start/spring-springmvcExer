<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/util 
	http://www.springframework.org/schema/util/spring-util-4.3.xsd">
	
	<!-- bean标签表示一个Bean对象
			class属性配置Bean的全类名
			id 唯一的标识 
	 -->
	<bean class="pojo.Person" id="p1">
		<!-- property标签配置属性值 
				name属性设置属性名
				value设置值 
		 -->
		<property name="id" value="1"/>
		<property name="name" value="tom"/>
	</bean>
	
	<!-- 通过构造器参数名注入值 -->
	<bean class="pojo.Person" id="p2">
		<constructor-arg name="id" value="2"/>
		<constructor-arg name="name" value="jack"/>
	</bean>
	
	<!-- index属性指定构造器参数的顺序 -->
	<bean class="pojo.Person" id="p3">
		<constructor-arg index="0" value="3"/>
		<constructor-arg index="1" value="rose"/>
	</bean>
	
	<!-- 通过构造器根据参数类型注入 -->
	<bean class="pojo.Person" id="p4">
		<constructor-arg index="0" value="4" type="java.lang.Integer"/>
		<constructor-arg index="1" value="stark" type="java.lang.String"/>
	</bean>
	
	<!-- p名称空间 -->
	<bean class="pojo.Person" id="p5" p:id="5" p:name="luna">
	</bean>
	
	<!-- 子对象的赋值测试 -->
	<bean class="pojo.Car" id="car" >
		<property name="carNo" value="1233"/>
		<property name="carName" value="红旗"/>
	</bean>
	<bean class="pojo.Person" id="p6">
		<property name="id" value="6"/>
		<property name="name" value="nash"/>
		<!-- 
			ref设置引入哪个对象
		 -->
		<property name="car" ref="car"/>
	</bean>
	
	<!-- 内部 Bean的是使用-->
	<bean class="pojo.Person" id="p7">
		<property name="id" value="7"/>
		<property name="name" value="andrson"/>
		<property name="car">
			<bean class="pojo.Car" id="car2">
				<property name="carNo" value="12333"/>
				<property name="carName" value="五菱宏光"/>
			</bean>
		</property>
	</bean>
	
	<!-- List属性赋值 -->
	<bean class="pojo.Person" id="p8">
		<property name="id" value="8"/>
		<property name="name" value="yuno"/>
		<property name="car" ref="car"/>
		<property name="list">
			<list>
				<value>list1</value>
				<value>list2</value>
				<value>list3</value>
				<value>list4</value>
			</list>
		</property>
	</bean>
	
	<!-- Map属性赋值 -->
	<bean class="pojo.Person" id="p9">
		<property name="id" value="9"/>
		<property name="name" value="asuna"/>
		<property name="car" ref="car"/>
		<property name="map">
			<map>
			<!-- 
					entry标签表示Map集合中每一项
						key 表示key内容
						value 表示值内容
				 -->
			
				<entry key="key1" value="value1"></entry>
				<entry key="key2" value="value2"></entry>
				<entry key="key3" value="value3"></entry>
				<entry key="key4" value="value4"></entry>
			</map>
		</property>
	</bean>
	
	<!-- properties属性的赋值 -->
	<bean class="pojo.Person" id="p10">
		<property name="id" value="10"/>
		<property name="name" value="kirito"/>
		<property name="pros">
			<!-- 
				props标签表示赋值的类型是Properties类型
			 -->
			<props>
				<!-- prop表示一个键 值 对 -->
				<prop key="url">jdbc:mysql://localhost:3306/test</prop>
				<prop key="driver">com.mysql.jdbc.Driver</prop>
			</props>
		</property>
	</bean>
	
	<!-- util名称空间 -->
	<util:list id="list1">
		<value>外部list1</value>
		<value>外部list2</value>
		<value>外部list3</value>
		<value>外部list4</value>
	</util:list>
	<bean class="pojo.Person" id="p11">
		<constructor-arg name="id" value="11"/>
		<constructor-arg name="name" value="alice"/>
		<property name="list" ref="list1"/>
	</bean>
	
	<!-- 级联属性在赋值的时候，一定要先给子对象赋值 -->
	<bean class="pojo.Person" id="p12" scope="prototype">
		<property name="id" value="12"/>
		<property name="name" value="elise"/>
		<property name="car" ref="car"/>
		<property name="car.carNo" value="123456"/>
	</bean>
	
	<!-- 静态工厂方法创建Bean -->
	<!-- 
		 factory-method 表示工厂方法
		 class 表示工厂类的全类名
		 class + factory-method  表示调用Class属性指定的类的静态方法
	 -->
	<bean class="pojo.PersonFactory" id="p13" factory-method="createPerson"/>
	
	<!-- 工厂示例方法创建Bean -->
	<!-- 配置工厂实例 -->
	<bean class="pojo.PersonFactory" id="personFactory"/>
		<!-- 
		factory-bean使用哪个bean做工厂实例
		factory-method 调用哪个方法
		 -->
	<bean id="p14" factory-bean="personFactory" factory-method="createPerson2"></bean>
	
	<!-- FactoryBean接口方式创建对象 -->
	<bean class="pojo.PersonFactoryBean" id="p15"/>

	<!-- 继承Bean配置 -->
	<bean class="pojo.Person" id="parent">
		<property name="id" value="16"/>
		<property name="name" value="natouco"/>
		<property name="car" ref="car"/>
	</bean>
	<bean class="pojo.Person" parent="parent" id="p16">
		<!-- <property name="car.carName" value="glk"/> -->
	</bean>

	<!-- abstract抽象Bean -->
	<bean class="pojo.Person" id="parent01" abstract="true">
		<property name="id" value="17"/>
		<property name="name" value="ichiku"/>
		<property name="car" ref="car"/>
	</bean>
	<bean class="pojo.Person" id="p17" parent="parent01"/>
	
	<!-- 基于xml配置文件的自动注入 -->
	<bean class="pojo.Person" id="p18" autowire="constructor">
		<property name="id" value="18"/>
		<property name="name" value="evelyn"/>
	</bean>
	
	<!-- Bean的生命周期 -->
	<bean class="pojo.Car" id="car02" init-method="init" destroy-method="destory">
		<property name="carNo" value="111222"/>
		<property name="carName" value="oop"/>
	</bean>
	
	<!-- 
		Bean默认的创建顺序是由他们在Spring配置文件中从上到下的配置顺序决定
		depends-on属性设置依赖，可以让依赖的对象先创建。
		 depends-on="b,c" 表示要创建a，就要先创建b和c
	 -->
	<bean class="pojo.A" id="a" depends-on="b,c"/>
	<bean class="pojo.B" id="b" />
	<bean class="pojo.C" id="c" />
	
</beans>
